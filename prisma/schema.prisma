generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model applications {
  id                                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                               DateTime  @default(now()) @db.Timestamptz(6)
  completed_at                             DateTime? @db.Timestamptz(6)
  interviewee_id                           String    @db.Uuid
  interviewer_id                           String    @db.Uuid
  users_applications_interviewee_idTousers users     @relation("applications_interviewee_idTousers", fields: [interviewee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_applications_interviewer_idTousers users     @relation("applications_interviewer_idTousers", fields: [interviewer_id], references: [id], onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model characters {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String          @unique @db.VarChar(255)
  class        character_class
  level        Int             @default(1)
  is0800enable Boolean         @default(false)
  user_id      String          @db.Uuid
  created_at   DateTime        @default(now()) @db.Timestamptz(6)
  updated_at   DateTime        @default(now()) @db.Timestamptz(6)
  users        users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model credentials {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password_hash String    @db.VarChar(255)
  salt          String    @db.VarChar(255)
  last_login    DateTime? @db.Timestamptz(6)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  user_id       String    @unique @db.Uuid
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model roles {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @unique @db.VarChar(50)
  user_roles user_roles[]
}

model token_cache {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String
  expiration DateTime @db.Timestamptz(6)
}

model user_roles {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String   @db.Uuid
  role_id     String   @db.Uuid
  assigned_at DateTime @default(now()) @db.Timestamptz(6)
  roles       roles    @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, role_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name                                       String         @db.VarChar(255)
  cellphone                                       String         @unique @db.VarChar(255)
  email                                           String         @unique @db.VarChar(255)
  game_availability                               Int            @default(0) @db.SmallInt
  status                                          user_status    @default(PENDING)
  id_teamspeak                                    String?        @db.VarChar(255)
  created_at                                      DateTime       @default(now()) @db.Timestamptz(6)
  updated_at                                      DateTime       @default(now()) @db.Timestamptz(6)
  applications_applications_interviewee_idTousers applications[] @relation("applications_interviewee_idTousers")
  applications_applications_interviewer_idTousers applications[] @relation("applications_interviewer_idTousers")
  characters                                      characters[]
  credentials                                     credentials?
  user_roles                                      user_roles[]
}

enum character_class {
  EA
  EP
  WB
  WF
  MG
  WR
}

enum user_status {
  PENDING
  INITIATED
  APPROVED
  DENIED
  LEFT
  BANNED
}
